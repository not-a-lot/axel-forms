<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xt="http://ns.inria.org/xtiger" xml:lang="en" lang="en">
<head>
  <meta charset="utf-8"/>
  <title>The "select2" plugin</title>
  <xt:head version="1.1" templateVersion="1.0" label="Demo">
  </xt:head>

  <script type="text/javascript" src="../../../axel/3rd-part/jquery/js/jquery-1.7.2.js"></script>

  <script type="text/javascript" charset="utf-8" src="../../../axel/templates/shared/demo.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../axel/templates/shared/demo.css"/>

  <link rel="stylesheet" type="text/css" href="../../3rd-part/select2-4.0.3/dist/css/select2.min.css"/>
  <!--<script type="text/javascript" src="../../3rd-part/select2-4.0.3/dist/js/select2.min.js"></script>-->

  <style type="text/css" media="screen">
    select.axel-choice {
      width: 150px;
    }
    select.axel-choice.districts {
      width: 300px;
    }

    span.select2-match {
      text-decoration: underline;
    }

    span.town {
      color: gray;
      font-style: italic;
    }
  </style>
</head>
<body>

<h2>Basic usage</h2>

<p>With a default selection.</p>

<div class="demo extract">
  <p>
    <!--I prefer <xt:attribute types="select2" name="SeasonWithDefault" default="Autumn" values="Winter Spring Summer Autumn"/>-->
    I prefer <xt:attribute types="select2" name="SeasonWithDefault" default="Autumn" values="Winter Spring Summer Autumn" param="read-only=yes"/>
    <!-- in <xt:attribute types="choice" name="continent" default="Europe" param="filter=select2" values="Africa America Europe Oceania" option="unset"/>. -->
  </p>
</div>

<p>Without default selection and with a placeholder.</p>

<div class="demo extract">
  <p>
    I prefer <xt:use types="select2" label="SeasonPlaceHolder" param="placeholder=Choose…;multiple=yes" values="Winter Spring Summer Autumn"/>
    <!-- in <xt:attribute types="choice" name="continent" default="Europe" param="filter=select2" values="Africa America Europe Oceania" option="unset"/>. -->
  </p>
</div>

<p>Inside a repetition.</p>

<div class="demo extract">
  <p>Select your seasons by preference order :
    <xt:repeat minOccurs="1" maxOccurs="*" label="Seasons">
      <xt:use types="select2" label="Season" values="Winter Spring Summer Autumn" param="placeholder=Choose…"/>
    </xt:repeat>
  </p>
</div>

<h3>As an element (and with i18n labels)</h3>

<div class="demo extract">
  <p>
    I prefer to pay with <xt:use types="select2" label="Currency" values="EUR USD CHF" i18n="Euro Dollars Swiss-franc">USD</xt:use>.
  </p>
</div>

<h2>Multiple choices</h2>

<p>The <var>xvalue</var> parameter is used to serialize the selected options in XML elements instead of a comma-separated list of options.</p>

<div class="demo extract">
  <p>
    Please select one or more Swiss canton <xt:use types="select2" label="Districts" param="width=300px;multiple=yes;placeholder=Choose…;xvalue=District;class=districts" values="AG AI AR BE BL BS FR GE GL GR JU LU NE NW OW SG SH SZ SO TI TG UR VS VD ZG ZH" i18n="Argovie Appenzell\ Interieur Appenzell\ Exterieur Berne Bale-Campagne Bale-Ville Fribourg Geneve Glaris Grisons Jura Lucerne Neuchatel Nidwald Obwald Saint-Gall Schaffhouse Schwytz Soleure Tessin Thurgovie Uri Valais Vaud Zoug Zurich"/>
  </p>
</div>

<h2>Multiple choices with double entry keys</h2>

<p>You can declare the option labels using a complement separated from the principal label with two colons (<code>::</code>). The complement will appear within a <code>span</code> element with a <code>select2_complement</code> class name so you can style it. This is useful to create double entry selection lists where you can use either the label or the complement as a key for keyboard access. You can change the complement class using the <var>select2_complement</var> parameter .</p>

<div class="demo extract">
  <p>
    Please select one or more Swiss canton <xt:use types="select2" label="DistrictsDoubleKey"
                                                   param="multiple=yes;xvalue=District;placeholder=Choose something...;class=districts;complement=town;dropdownAutoWidth=true;minimumInputLength=2"
                                                   values="AG AI AR BE BL BS FR GE GL GR JU LU NE NW OW SG SH SZ SO TI TG UR VS VD ZG ZH"
                                                   i18n="Argovie::Aarau Appenzell\ Interieur::Appenzell Appenzell\ Exterieur::Herisau Berne Bale-Campagne::Liestal Bale-Ville::Bale Fribourg Geneve Glaris Grisons::Coire Jura::Delémont Lucerne Neuchatel Nidwald::Stans Obwald::Sarnen Saint-Gall Schaffhouse Schwytz Soleure Tessin::Bellinzone Thurgovie::Frauenfeld Uri::Altdorf Valais::Sion Vaud::Lausanne Zoug Zurich" />
  </p>
</div>

<h2>Single choice with free text entry</h2>

<p>The <var>tags</var> parameter uses the <i>tags</i> parameter of the select2 library to create a combo list with free text entry to enter new tag-like options. In that case the plugin will serialize current selection as either the new free text entry or as the display value (localized label) of the corresponding predefined option, excluding any complement appearing after <code>::</code>. For that reason, if you declare the predefined options label inside the <var>i18n</var> attribute of the <code>xt:use</code> element, you may omit the <var>values</var> attribute.</p>

<p>Using <var>tags</var> implies that the <var>appearance</var> parameter is set to <i>compact</i> (generated as a drop down list, which is the default) and that the <var>multiple</var> parameter is set to <i>yes</i>.</p>

<p>Currently <var>tags</var> must be declared with the <i>yes</i> value.</p>

<div class="demo extract">
  <p>
    Please choose a nickname <xt:use types="select2" label="Nickname"
                                     param="tags=yes;width=250px;minimumInputLength=2;complement=comment;required=true"
                                     i18n="Fast::popular Furious Quick::very\ popular Rapid Slow" />
  </p>
  <p>
    You may select an already existing one to create a new duplicate
  </p>
</div>

<h2>Ampersand character in option</h2>

<p>You can use ampersand characters to label options with the corresponding entity <code>&amp;amp;</code> in the <i>i18n</i> attribute.</p>

<div class="demo extract">
  <p>Choose a professionnal category :
    <xt:use types="select2" values="1 2 3 4 5" label="CategoryRef"
            i18n="Accountability Research&amp;Development Engineering Consultancy&amp;Planing Other"
            param="dropdownAutoWidth=true;width=250px;minimumResultsForSearch=2;multiple=no"
    >1</xt:use>
  </p>
</div>

<h2>Combining with the 'optional' filter</h2>

<p>This supposes you have called something like <code>$axel.filter.applyTo({ 'optional' : 'select2' });</code> after loading the AXEL and AXEL-FORMS libraries, note that this is done automatically when using AXEL-FORMS.</p>

<p>With a single choice without placeholder and without default value :</p>

<div class="demo extract">
  <p>
    My favourite fruit <xt:use types="select2" label="FruitWithOptionalFilter" param="filter=optional" values="Apple Orange Strawberry Ananas"/>
  </p>
</div>

<p>With a single choice, without placeholder and with a default value (however you should better use a placeholder in that case) :</p>

<div class="demo extract">
  <p>
    My favourite fruit <xt:use types="select2" label="FruitWithOptionalFilterDV" param="filter=optional" values="None Apple Orange Strawberry Ananas">None</xt:use>
  </p>
</div>

<p>With a single choice with placeholder :</p>

<div class="demo extract">
  <p>
    My favourite nickname <xt:use types="select2" label="FruitWithOptionalFilterPH" param="filter=optional;placeholder=Choose…" values="Alfredo Alberto Gilberto Rodrigo"/>
  </p>
</div>

<p>With a multiple choice, the optional filter will discard the parent label if no choices are selected :</p>

<div class="demo extract">
  <p>
    My favourite colors <xt:use types="select2" label="ColorsWithOptionalFilter" param="filter=optional;multiple=yes;xvalue=Color" values="Blue Yellow Rose Green Violet Chartreuse"/>
  </p>
</div>

<h2>Using the Select2's ajax option as a data source instead of values</h2>

<div class="demo extract">
  <p>
    I prefer <xt:attribute types="select2" param="ajax-url=http://localhost:8081;ajax-datatype=json;ajax-delay=250;ajax-cache=yes;width=250px"/>
  </p>
</div>

<h2>Demo of the Select2 plugin with the ajax binding (with repeated master field and with repeated target field) — See <code>templates/bindings/Ajax.xhtml</code></h2>

<xt:repeat label="Companies" minOccurs="1" maxOccurs="*">
  <fieldset class="company">
    <label><xt:menu-marker/></label>
    <p data-binding="ajax" data-variable="company" data-ajax-scope=".company" data-ajax-cache='{"1":[{"label":"Jacques","value":"1"},{"label":"Isabelle","value":"2"}],"2":[{"label":"Pierre","value":"3"},{"label":"Paul","value":"4"},{"label":"Aline","value":"5"}]}'>
      Company : <xt:use types="select2" label="Company" values="1 2" i18n="Foo Bar" param="filter=event optional;placeholder=none"/>
    </p>
    <div>
      <xt:repeat label="Contacts" minOccurs="0" maxOccurs="*">
        <p data-ajax-trigger="company">Contact person : <xt:use types="select2" label="Contact" param="filter=optional"/><xt:menu-marker/></p>
      </xt:repeat>
    </div>
  </fieldset>
</xt:repeat>

</body>
</html>